diff --git a/bin/clueGame/Board.class b/bin/clueGame/Board.class
index 41c397a..3a4c2d5 100644
Binary files a/bin/clueGame/Board.class and b/bin/clueGame/Board.class differ
diff --git a/src/clueGame/BadConfigFormatException.java b/src/clueGame/BadConfigFormatException.java
index 97a022b..fb84f42 100644
--- a/src/clueGame/BadConfigFormatException.java
+++ b/src/clueGame/BadConfigFormatException.java
@@ -4,7 +4,7 @@ public class BadConfigFormatException extends Exception{
 	String file;
 	public BadConfigFormatException(String fl) {
 		super("Error: bad config format");
-		file =fl;
+		file = fl;
 	}
 	@Override
 	public String toString() {
diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index bc22afa..7c23684 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -17,129 +17,113 @@ public class Board{
 	private int numRows;
 	private int numColumns;
 	Map<Character, Room> roomMap;
-    private static Board theInstance = new Board();
-    
-    // constructor is private to ensure only one can be created
-    private Board() {
-           super() ;
-           
-    }
-    // this method returns the only Board
-    public static Board getInstance() {
-           return theInstance;
-    }
-    /*
-     * initialize the board (since we are using singleton pattern)
-     */
-    public void initialize() { // should the exceptions be dealt with in initialize? , also does it call both load functions?
-    	try {
-    		loadSetupConfig();
-    		loadLayoutConfig();
-    	}catch(BadConfigFormatException error){
-    		System.out.println("Setup Failed");
-    	}
-    }
-    
-    public void setConfigFiles(String string, String string2) {
-    	this.layoutConfigFile = string;
-    	this.setUpConfigFile = string2;
-    	
-    }
-	public BoardCell getCell(int row, int col) {
-		// TODO Auto-generated method stub
-		return grid[row][col];
-	}
-	public int getNumRows() {
-		// TODO Auto-generated method stub
-		return numRows;
-	}
-	public int getNumColumns() {
-		// TODO Auto-generated method stub
-		return numColumns;
+	private static Board theInstance = new Board();
+
+	// constructor is private to ensure only one can be created
+	private Board() {
+		super() ;
+
 	}
-	public Room getRoom(char c) {
-		// TODO Auto-generated method stub
-		return roomMap.get(c);
+
+	// this method returns the only Board
+	public static Board getInstance() {
+		return theInstance;
 	}
-	public Room getRoom(BoardCell cell) {
-		// TODO Auto-generated method stub
-		return roomMap.get(cell.getInitial());
+
+	/*
+	 * initialize the board (since we are using singleton pattern)
+	 */
+	public void initialize() { // exceptions are thrown to this method, also calls both load functions
+		try {
+			loadSetupConfig();
+			loadLayoutConfig();
+		}catch(BadConfigFormatException error){
+			System.out.println("Setup/Layout Failed");
+		}
 	}
+
+	//sets up the HashMap for the rooms using the setup files
 	public void loadSetupConfig() throws BadConfigFormatException {
-		FileReader file;
-		String temp;
-		String[] arr;
 		Scanner reader = null;
 		this.roomMap = new HashMap<Character, Room>();
+
 		try {
-			file = new FileReader(this.setUpConfigFile); // creating a filereader object with the setup file
+			FileReader file = new FileReader(this.setUpConfigFile); // creating a filereader object with the setup file
 			reader = new Scanner(file); // passing the scanner the filereader obj
 		} catch (FileNotFoundException e) {
 			e.printStackTrace();
 		}
+
 		while(reader.hasNext()) {//while there is a line to be taken in
-			temp = reader.nextLine(); //read the whole line into temp string
+			String temp = reader.nextLine(); //read the whole line into temp string
+
 			if(temp.charAt(0)=='/') { // to avoid reading in comments in the file
 				continue;
 			}
-			
-			arr = temp.split(", "); // takes the temp string that was the whole line and splits it based off of commas
+
+			String [] arr = temp.split(", "); // takes the temp string that was the whole line and splits it based off of commas
 			if(arr.length!=3) { // if the length isn't 3 then there must be some info missing in that line
 				throw new BadConfigFormatException(this.setUpConfigFile);
 			}
-		
-			if(!(arr[0].equals("Room"))) { // if what we are reading in isn't called a room then there is some bad format
-				if(!(arr[0].equals("Space"))) {					
+
+			if(!(arr[0].equals("Room"))) { // if what we are reading in isn't called a room
+				if(!(arr[0].equals("Space"))) {	//and it's not a space, throw an exception
 					throw new BadConfigFormatException(this.setUpConfigFile);
 				}
 			}
 			Character temp2 = arr[2].charAt(0); // this is the char we care about to make the rooms
-//			tempRoom = new Room(arr[1]);
-//			tempRoom.setName(arr[0]); // sets the name of the room to be the first thing in the array
-			String roomName = arr[1];
+			String roomName = arr[1]; //this is the name of the room
 			this.roomMap.put(temp2, new Room(roomName)); //adds the room to the map
-			
+
 		}
 		reader.close();
 	}
+
 	public void loadLayoutConfig() throws BadConfigFormatException {
-		FileReader file;
+		//variables that will be needed multiple times
 		String temp = null;
 		String[] arr;
 		BoardCell tempCell;
 		Character temp2;
 		Scanner reader = null;
 		ArrayList<String> tempArr = new ArrayList<String>();
+
 		int rows=0;
 		int columns=0;
 		int prevCol =0;
+
 		try {
-			file = new FileReader(this.layoutConfigFile); // creating a filereader object with the setup file
+			FileReader file = new FileReader(this.layoutConfigFile); // creating a filereader object with the setup file
 			reader = new Scanner(file); // passing the scanner the filereader obj
 		} catch (FileNotFoundException e) {
 			e.printStackTrace();
 		}
+
 		while(reader.hasNext()) { // these two loops will be used to calculate the dimensions of the board and make sure that its formatted correctly
 			temp = reader.nextLine();
 			tempArr.add(temp); // adding each string line to an arraylist of strings
 			arr = temp.split(","); // splitting the string into rows
+			
 			if(rows==0) { // doing this so we have an initial value to compare the rest of the columns to
 				prevCol = arr.length;
 				rows++;
 				continue;
 			}
+			
 			columns = arr.length; // getting columns a value one ahead of prevcol
 			if(prevCol != columns) { // if the columns aren't equal config format error
 				throw new BadConfigFormatException(this.layoutConfigFile);
 			}
+			
 			prevCol = columns; // keeps prevcol trailing behind
 			columns=0;
 			rows++; // upadtes row by row
 		}
-		
+
 		this.numColumns = prevCol; // if there is no bad config exception any column number should work
 		this.numRows = rows; 
 		this.grid = new BoardCell[this.numRows][this.numColumns];
+		
 		for(int r=0; r<numRows; r++) {
 			temp = tempArr.get(r);
 			arr = temp.split(","); // splits the string along the commas
@@ -182,17 +166,45 @@ public class Board{
 			}
 		}
 	}
-	
+
+	//the files are set here with a method, not in a constructor
+	public void setConfigFiles(String string, String string2) {
+		this.layoutConfigFile = string;
+		this.setUpConfigFile = string2;
+
+	}
+
+	public BoardCell getCell(int row, int col) {
+		return grid[row][col];
+	}
+
+	public int getNumRows() {
+		return numRows;
+	}
+
+	public int getNumColumns() {
+		return numColumns;
+	}
+
+	public Room getRoom(char c) {
+		return roomMap.get(c);
+	}
+
+	public Room getRoom(BoardCell cell) {
+		return roomMap.get(cell.getInitial());
+	}
+
+
 	public Set<BoardCell> getAdjList(int row, int col) {
 		return grid[row][col].getAdjList();
 	}
-	
+
 	public void calcTargets(BoardCell strtCell, int pathLen) {
-		
+
 	}
 	public Set<BoardCell> getTargets() {
 		return null;
 	}
-	
-	
+
+
 }
\ No newline at end of file
